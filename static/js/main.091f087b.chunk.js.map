{"version":3,"sources":["data.js","Cart.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["id","title","content","price","Parent","props","Child1","name","Child2","age","useEffect","console","log","memo","connect","state","reducer","alert","reducer2","Table","responsive","Array","from","map","_","index","value","array","quan","type","onClick","dispatch","payload","className","bind","Detail","lazy","stockContext","React","createContext","LastProducts","lsState","length","Item","useContext","history","useHistory","push","shoe","deepCopyLsState","lsExist","findIndex","obj","splice","lsStateEdit","localStorage","setItem","JSON","stringify","src","alt","width","Test","stock","Loading","arr","i","App","useState","data","shoes","shoesEdit","loading","loadingEdit","stockEdit","parse","getItem","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","to","NavDropdown","Divider","exact","path","Jumbotron","Button","variant","Provider","axios","get","then","result","catch","err","error","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","defaultState","store","createStore","combineReducers","action","stateCopyIndex","stateCopy","entries","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.091f087b.chunk.js","sourcesContent":["export default [\r\n    {\r\n        id: 0,\r\n        title: 'White and Black',\r\n        content: 'Born in France',\r\n        price: 120000\r\n    },\r\n    {\r\n        id: 1,\r\n        title: 'Red Knit',\r\n        content: 'Born in Seoul',\r\n        price: 110000\r\n    },\r\n    {\r\n        id: 2,\r\n        title: 'Grey Yordan',\r\n        content: 'Born in States',\r\n        price: 130000\r\n    },\r\n]","import React, {useEffect, memo} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\n\r\nfunction Cart(props) {\r\n    function alertClose(props) {\r\n        props.dispatch({\r\n            type: 'alert닫기'\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Table responsive>\r\n                <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    {Array.from(['상품명', '수량', '변경']).map((_, index) => (\r\n                        <th key={index}>{_}</th>\r\n                    ))}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    props.state.map((value, index, array) => {\r\n                        return (\r\n                            <tr>\r\n                                <td>{value.id}</td>\r\n                                <td>{value.name}</td>\r\n                                <td>{value.quan}</td>\r\n                                <td>\r\n                                    <button type=\"button\" onClick={() => {\r\n                                        // 데이터 수정 요청을 할 땐 props.dispatch()\r\n                                        props.dispatch({\r\n                                            type: '수량증가',\r\n                                            index: value.id,\r\n                                            // payload - 화물에 물건 실어서 보내듯이 아래와 같이 dispatch할 때마다 데이터를 보낼 수 있음.\r\n                                            payload: {\r\n                                                name: 'kim'\r\n                                            }\r\n                                        })\r\n                                    }}>+</button>\r\n                                    <button type=\"button\" onClick={() => {\r\n                                        props.dispatch({\r\n                                            type: '수량감소',\r\n                                            index: value.id,\r\n                                        })\r\n                                    }}>-</button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n                </tbody>\r\n            </Table>\r\n            {\r\n                props.alert === true ?\r\n                    (<div className=\"my-alert2\">\r\n                        <p>지금 구매하시면 신규할인 20%</p>\r\n                        <button type=\"button\" onClick={alertClose.bind(null, props)}>닫기</button>\r\n                    </div>) : null\r\n            }\r\n            <Parent name=\"존박\" age=\"20\"></Parent>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Parent(props) {\r\n    return (\r\n        <div>\r\n            <Child1 name={props.name}/>\r\n            <Child2 age={props.age}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Child1(props) {\r\n    // useEffect 로딩, 재렌더링시 실행할 코드\r\n    useEffect(() => { console.log('렌더링됨1') })\r\n    return <div>1111</div>\r\n}\r\n\r\nlet Child2 = memo(function () {\r\n    useEffect(() => { console.log('렌더링됨2') })\r\n    return <div>2222</div>\r\n})\r\n\r\n// redux store 데이터 가져와서 props로 변환해주는 함수\r\nfunction stateProps(state) {\r\n    return {\r\n        state: state.reducer,\r\n        alert: state.reducer2\r\n    }\r\n}\r\n\r\nexport default connect(stateProps)(Cart)\r\n\r\n// export default Cart;","import {Nav, Navbar, NavDropdown, Jumbotron, Button} from 'react-bootstrap';\r\nimport './App.css';\r\nimport React, {useContext, useState, lazy, Suspense} from \"react\";\r\nimport data from './data';\r\n// import Detail from \"./Detail\";\r\nimport axios from 'axios';\r\nimport Cart from \"./Cart\";\r\n\r\nimport {Link, Route, Switch, useHistory} from 'react-router-dom';\r\nimport {forEach} from \"react-bootstrap/ElementChildren\";\r\n\r\nlet Detail = lazy(() => { return import('./Detail.js') });\r\n\r\n// context 만들기\r\n// 1. React.createContext()로 범위 생성 - 범위가 뭐냐면 같은 변수값을 공유할 범위를 뜻함. React.createContext() 이걸로 그 범위를 생성\r\n// 2. 같은 값을 공유할 HTML을 범위로 싸매기\r\n// - 값 공유를 원하는 HTML들을 <범위.Provider>로 감싸고 value={공유원하는 값} 설정\r\nexport let stockContext = React.createContext();\r\n\r\nfunction App() {\r\n\r\n    let [shoes, shoesEdit] = useState(data);\r\n    let [loading, loadingEdit] = useState(false);\r\n    let [stock, stockEdit] = useState([10, 11, 12]);\r\n    let [lsState, lsStateEdit] = useState(JSON.parse(localStorage.getItem('lastProducts')) || []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand href=\"#home\">shoeShop</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"ml-auto\">\r\n                        <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n                        <Nav.Link as={Link} to=\"/detail\">Detail</Nav.Link>\r\n                        <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                            <NavDropdown.Divider/>\r\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Jumbotron className=\"background\">\r\n                        <h1>20% Season OFF!</h1>\r\n                        <p>\r\n                            This is a simple hero unit, a simple jumbotron-style component for calling\r\n                            extra attention to featured content or information.\r\n                        </p>\r\n                        <p>\r\n                            <Button variant=\"primary\">Learn more</Button>\r\n                        </p>\r\n                    </Jumbotron>\r\n                    <div className=\"container\">\r\n\r\n                        <stockContext.Provider value={stock}>\r\n\r\n                        <div className=\"row\">\r\n                            {\r\n                                shoes.map((value, index, array) => {\r\n                                    return (\r\n                                        <Item key={index} shoe={value} lsState={lsState} lsStateEdit={lsStateEdit} />\r\n                                    )\r\n                                })\r\n                            }\r\n                            {\r\n                                loading === true ? <Loading /> : null\r\n                            }\r\n                        </div>\r\n\r\n                        </stockContext.Provider>\r\n\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => {\r\n\r\n                            loadingEdit(true);\r\n\r\n                            // axios도 fetch도 모두 Promise 활용한 거였군.\r\n                            // then은 요청하고나서 제대로 응답왔을 때. 즉, 성공했을 때\r\n                            // catch는 실패했을 때 실행\r\n                            // then 메소드만으로도 성공, 실패 나눌 수 있긴함. 첫번째 인자 함수가 성공했을 시, 두번째 인자 함수가 실패했을 시\r\n                            // 그런데 그러면 가독성이 떨어져 then, catch로 나누어 쓰는듯.\r\n                            axios.get('https://codingapple1.github.io/shop/data2.json')\r\n                                .then((result) => {\r\n                                    loadingEdit(false);\r\n                                    shoesEdit([...shoes, ...result.data]);\r\n                                })\r\n                                .catch((err) => {\r\n                                    loadingEdit(false);\r\n                                    console.error(err);\r\n                                })\r\n                        }}>더보기</button>\r\n                    </div>\r\n\r\n\r\n                </Route>\r\n\r\n                <Route path=\"/cart\">\r\n                    <Cart/>\r\n                </Route>\r\n\r\n                <Route path=\"/detail/:id\">\r\n                    <stockContext.Provider value={stock}>\r\n                        {/* 로딩 전까지 보여줄 HTML을 fallback에 작성 */}\r\n                        <Suspense fallback={<div>로딩중이에요</div>}>\r\n                            <Detail shoes={shoes} stock={stock} stockEdit={stockEdit} />\r\n                        </Suspense>\r\n                    </stockContext.Provider>\r\n                </Route>\r\n\r\n                <Route path=\"/:id\">\r\n                    <div>아무거나</div>\r\n                </Route>\r\n            </Switch>\r\n\r\n            <LastProducts lsState={lsState} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction LastProducts(props) {\r\n    return (\r\n        <div className=\"last-products\">\r\n            {\r\n                props.lsState.map((value, index) => {\r\n                    return (\r\n                        // 역순으로 나열\r\n                        <div className=\"last-products-item\">\r\n                            <em>제품번호: {props.lsState[props.lsState.length - index - 1].id}</em>\r\n                            <h2>제품명: {props.lsState[props.lsState.length - index - 1].title}</h2>\r\n                            <p>제품설명: {props.lsState[props.lsState.length - index - 1].content}</p>\r\n                            <p>제품가격: {props.lsState[props.lsState.length - index - 1].price}</p>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Item(props) {\r\n\r\n    let stock = useContext(stockContext);\r\n    let history = useHistory();\r\n\r\n    return (\r\n        // 페이지 이동을 위해 history.push() 이용\r\n        <div className=\"col-md-4\" onClick={() => {\r\n            history.push(`/detail/${props.shoe.id}`);\r\n            // 로컬스토리지 저장\r\n            const deepCopyLsState = [...props.lsState];\r\n            let lsExist = -1;\r\n            if (deepCopyLsState.length > 0) {\r\n                lsExist = deepCopyLsState.findIndex((value, index, obj) => {\r\n                    return value.id === props.shoe.id;\r\n                })\r\n            }\r\n            if (lsExist !== -1) {\r\n                deepCopyLsState.splice(lsExist, 1);\r\n                deepCopyLsState.push(props.shoe);\r\n            } else {\r\n                deepCopyLsState.push(props.shoe);\r\n            }\r\n            props.lsStateEdit(deepCopyLsState);\r\n            localStorage.setItem(\"lastProducts\", JSON.stringify(deepCopyLsState))\r\n        }}>\r\n            <img src={`https://codingapple1.github.io/shop/shoes${props.shoe.id+1}.jpg`} alt=\"\" width=\"100%\"/>\r\n            <h4>{ props.shoe.title }</h4>\r\n            <p>{ props.shoe.content } & { props.shoe.price }</p>\r\n            <Test/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Test() {\r\n    let stock = useContext(stockContext);\r\n    return <p>재고: {stock}</p>\r\n}\r\n\r\nfunction Loading() {\r\n    const arr = [];\r\n    for (let i=0; i<3; i++) {\r\n        arr.push(<div>로딩중입니다.</div>)\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n// Provider 컴포넌트 import 해오기\r\nimport {Provider} from 'react-redux';\r\n// createStore 함수 import 해오기\r\nimport {combineReducers, createStore} from \"redux\";\r\n\r\nlet alertDefault = true;\r\n\r\nfunction reducer2(state = alertDefault, action) {\r\n    if (action.type === 'alert닫기') {\r\n        state = false;\r\n        return state;\r\n    } else {\r\n        return state;\r\n    }\r\n}\r\n\r\nlet defaultState = [\r\n    { id: 11, name: '흐음', quan: 2 },\r\n    { id: 12, name: '되긴되네', quan: 10 },\r\n    { id: 13, name: '재밌긴하군', quan: 8 }\r\n]\r\n\r\n// reducer는 수정된 state 데이터를 return하는 함수입니다.\r\n// 아래 파라미터 작성법은 default parameter 문법입니다. 파라미터의 초기값을 설정하는 문법이라고 생각하시면 됩니다.\r\nfunction reducer(state = defaultState, action) {\r\n    // dispatch로 보낸 object 데이터는 action 인자에 들어있음\r\n    // action.type : 데이터를 수정하는 조건\r\n    // 수량증가라는 데이터 수정방법을 정의한 것\r\n    if (action.type === '항목추가') {\r\n        // deep copy\r\n        const stateCopy = [...state];\r\n        let stateCopyIndex;\r\n        for (const [index, value] of stateCopy.entries()) {\r\n            if (value.id === action.payload.id) {\r\n                stateCopyIndex = index;\r\n                break;\r\n            }\r\n        }\r\n        if (stateCopyIndex) {\r\n            stateCopy[stateCopyIndex].quan++;\r\n        } else {\r\n            stateCopy.push(action.payload);\r\n        }\r\n        return stateCopy;\r\n    } else if (action.type === '수량증가') {\r\n        // deep copy\r\n        const stateCopy = [...state];\r\n        let stateCopyIndex;\r\n        for (const [index, value] of stateCopy.entries()) {\r\n            if (value.id === action.index) {\r\n                stateCopyIndex = index;\r\n                break;\r\n            }\r\n        }\r\n        stateCopy[stateCopyIndex].quan++;\r\n        return stateCopy;\r\n    } else if (action.type === '수량감소') {\r\n        // deep copy\r\n        const stateCopy = [...state];\r\n        let stateCopyIndex;\r\n        for (const [index, value] of stateCopy.entries()) {\r\n            if (value.id === action.index) {\r\n                stateCopyIndex = index;\r\n                break;\r\n            }\r\n        }\r\n        stateCopy[stateCopyIndex].quan = stateCopy[stateCopyIndex].quan - 1 < 0 ?\r\n            0 : stateCopy[stateCopyIndex].quan - 1;\r\n        return stateCopy;\r\n    } else {\r\n        return state\r\n    }\r\n}\r\n\r\n// createStore() 안에 state 초기값 저장\r\nlet store = createStore(combineReducers({ reducer, reducer2 }));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n          {/* <Provider>로 <App> 감싸기 */}\r\n          {/* Provider로 감싸진 애들은 props 없이도 state 공유 가능 */}\r\n          {/* Provider에 props 전송 */}\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  // App 컴포넌트를 index.html 파일의 root 아이디를 가진 요소에 넣어주세요~\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}