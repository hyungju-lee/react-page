{"version":3,"sources":["data.js","Cart.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["id","title","content","price","Parent","props","Child1","name","Child2","age","useEffect","console","log","memo","connect","state","reducer","alert","reducer2","alertClose","dispatch","type","Table","responsive","Array","from","map","_","index","value","array","quan","onClick","payload","bind","className","Detail","lazy","stockContext","React","createContext","LastProducts","lsState","length","Item","useContext","history","useHistory","push","shoe","deepCopyLsState","lsExist","findIndex","obj","splice","lsStateEdit","localStorage","setItem","JSON","stringify","src","alt","width","Test","stock","Loading","arr","i","App","useState","data","shoes","shoesEdit","loading","loadingEdit","stockEdit","parse","getItem","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","as","to","NavDropdown","Divider","exact","path","Jumbotron","Button","variant","Provider","axios","get","then","result","catch","err","error","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","defaultState","store","createStore","combineReducers","action","stateCopyIndex","stateCopy","entries","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8f160856.chunk.js","sourcesContent":["export default [\r\n    {\r\n        id: 0,\r\n        title: 'White and Black',\r\n        content: 'Born in France',\r\n        price: 120000\r\n    },\r\n    {\r\n        id: 1,\r\n        title: 'Red Knit',\r\n        content: 'Born in Seoul',\r\n        price: 110000\r\n    },\r\n    {\r\n        id: 2,\r\n        title: 'Grey Yordan',\r\n        content: 'Born in States',\r\n        price: 130000\r\n    },\r\n]","import React, {useEffect, memo} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\n\r\nfunction Cart(props) {\r\n    function alertClose(props) {\r\n        props.dispatch({\r\n            type: 'alert닫기'\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Table responsive>\r\n                <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    {Array.from(['상품명', '수량', '변경']).map((_, index) => (\r\n                        <th key={index}>{_}</th>\r\n                    ))}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    props.state.map((value, index, array) => {\r\n                        return (\r\n                            <tr>\r\n                                <td>{value.id}</td>\r\n                                <td>{value.name}</td>\r\n                                <td>{value.quan}</td>\r\n                                <td>\r\n                                    <button type=\"button\" onClick={() => {\r\n                                        // 데이터 수정 요청을 할 땐 props.dispatch()\r\n                                        props.dispatch({\r\n                                            type: '수량증가',\r\n                                            index: value.id,\r\n                                            // payload - 화물에 물건 실어서 보내듯이 아래와 같이 dispatch할 때마다 데이터를 보낼 수 있음.\r\n                                            payload: {\r\n                                                name: 'kim'\r\n                                            }\r\n                                        })\r\n                                    }}>+</button>\r\n                                    <button type=\"button\" onClick={alertClose.bind(null, props)}>-</button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n                </tbody>\r\n            </Table>\r\n            {\r\n                props.alert === true ?\r\n                    (<div className=\"my-alert2\">\r\n                        <p>지금 구매하시면 신규할인 20%</p>\r\n                        <button type=\"button\" onClick={() => {\r\n                            props.dispatch({\r\n                                type: 'alert닫기'\r\n                            })\r\n                        }}>닫기</button>\r\n                    </div>) : null\r\n            }\r\n            <Parent name=\"존박\" age=\"20\"></Parent>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Parent(props) {\r\n    return (\r\n        <div>\r\n            <Child1 name={props.name}/>\r\n            <Child2 age={props.age}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Child1(props) {\r\n    // useEffect 로딩, 재렌더링시 실행할 코드\r\n    useEffect(() => { console.log('렌더링됨1') })\r\n    return <div>1111</div>\r\n}\r\n\r\nlet Child2 = memo(function () {\r\n    useEffect(() => { console.log('렌더링됨2') })\r\n    return <div>2222</div>\r\n})\r\n\r\n// redux store 데이터 가져와서 props로 변환해주는 함수\r\nfunction stateProps(state) {\r\n    return {\r\n        state: state.reducer,\r\n        alert: state.reducer2\r\n    }\r\n}\r\n\r\nexport default connect(stateProps)(Cart)\r\n\r\n// export default Cart;","import {Nav, Navbar, NavDropdown, Jumbotron, Button} from 'react-bootstrap';\nimport './App.css';\nimport React, {useContext, useState, lazy, Suspense} from \"react\";\nimport data from './data';\n// import Detail from \"./Detail\";\nimport axios from 'axios';\nimport Cart from \"./Cart\";\n\nimport {Link, Route, Switch, useHistory} from 'react-router-dom';\nimport {forEach} from \"react-bootstrap/ElementChildren\";\n\nlet Detail = lazy(() => { return import('./Detail.js') });\n\n// context 만들기\n// 1. React.createContext()로 범위 생성 - 범위가 뭐냐면 같은 변수값을 공유할 범위를 뜻함. React.createContext() 이걸로 그 범위를 생성\n// 2. 같은 값을 공유할 HTML을 범위로 싸매기\n// - 값 공유를 원하는 HTML들을 <범위.Provider>로 감싸고 value={공유원하는 값} 설정\nexport let stockContext = React.createContext();\n\nfunction App() {\n\n    let [shoes, shoesEdit] = useState(data);\n    let [loading, loadingEdit] = useState(false);\n    let [stock, stockEdit] = useState([10, 11, 12]);\n    let [lsState, lsStateEdit] = useState(JSON.parse(localStorage.getItem('lastProducts')) || []);\n\n    return (\n        <div className=\"App\">\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\">shoeShop</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"ml-auto\">\n                        <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n                        <Nav.Link as={Link} to=\"/detail\">Detail</Nav.Link>\n                        <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                            <NavDropdown.Divider/>\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n\n            <Switch>\n                <Route exact path=\"/\">\n                    <Jumbotron className=\"background\">\n                        <h1>20% Season OFF!</h1>\n                        <p>\n                            This is a simple hero unit, a simple jumbotron-style component for calling\n                            extra attention to featured content or information.\n                        </p>\n                        <p>\n                            <Button variant=\"primary\">Learn more</Button>\n                        </p>\n                    </Jumbotron>\n                    <div className=\"container\">\n\n                        <stockContext.Provider value={stock}>\n\n                        <div className=\"row\">\n                            {\n                                shoes.map((value, index, array) => {\n                                    return (\n                                        <Item key={index} shoe={value} lsState={lsState} lsStateEdit={lsStateEdit} />\n                                    )\n                                })\n                            }\n                            {\n                                loading === true ? <Loading /> : null\n                            }\n                        </div>\n\n                        </stockContext.Provider>\n\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => {\n\n                            loadingEdit(true);\n\n                            // axios도 fetch도 모두 Promise 활용한 거였군.\n                            // then은 요청하고나서 제대로 응답왔을 때. 즉, 성공했을 때\n                            // catch는 실패했을 때 실행\n                            // then 메소드만으로도 성공, 실패 나눌 수 있긴함. 첫번째 인자 함수가 성공했을 시, 두번째 인자 함수가 실패했을 시\n                            // 그런데 그러면 가독성이 떨어져 then, catch로 나누어 쓰는듯.\n                            axios.get('https://codingapple1.github.io/shop/data2.json')\n                                .then((result) => {\n                                    loadingEdit(false);\n                                    shoesEdit([...shoes, ...result.data]);\n                                })\n                                .catch((err) => {\n                                    loadingEdit(false);\n                                    console.error(err);\n                                })\n                        }}>더보기</button>\n                    </div>\n\n\n                </Route>\n\n                <Route path=\"/cart\">\n                    <Cart/>\n                </Route>\n\n                <Route path=\"/detail/:id\">\n                    <stockContext.Provider value={stock}>\n                        {/* 로딩 전까지 보여줄 HTML을 fallback에 작성 */}\n                        <Suspense fallback={<div>로딩중이에요</div>}>\n                            <Detail shoes={shoes} stock={stock} stockEdit={stockEdit} />\n                        </Suspense>\n                    </stockContext.Provider>\n                </Route>\n\n                <Route path=\"/:id\">\n                    <div>아무거나</div>\n                </Route>\n            </Switch>\n\n            <LastProducts lsState={lsState} />\n        </div>\n    );\n}\n\nfunction LastProducts(props) {\n    return (\n        <div className=\"last-products\">\n            {\n                props.lsState.map((value, index) => {\n                    return (\n                        // 역순으로 나열\n                        <div className=\"last-products-item\">\n                            <em>제품번호: {props.lsState[props.lsState.length - index - 1].id}</em>\n                            <h2>제품명: {props.lsState[props.lsState.length - index - 1].title}</h2>\n                            <p>제품설명: {props.lsState[props.lsState.length - index - 1].content}</p>\n                            <p>제품가격: {props.lsState[props.lsState.length - index - 1].price}</p>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nfunction Item(props) {\n\n    let stock = useContext(stockContext);\n    let history = useHistory();\n\n    return (\n        // 페이지 이동을 위해 history.push() 이용\n        <div className=\"col-md-4\" onClick={() => {\n            history.push(`/detail/${props.shoe.id}`);\n            // 로컬스토리지 저장\n            const deepCopyLsState = [...props.lsState];\n            let lsExist = -1;\n            if (deepCopyLsState.length > 0) {\n                lsExist = deepCopyLsState.findIndex((value, index, obj) => {\n                    return value.id === props.shoe.id;\n                })\n            }\n            if (lsExist !== -1) {\n                deepCopyLsState.splice(lsExist, 1);\n                deepCopyLsState.push(props.shoe);\n            } else {\n                deepCopyLsState.push(props.shoe);\n            }\n            props.lsStateEdit(deepCopyLsState);\n            localStorage.setItem(\"lastProducts\", JSON.stringify(deepCopyLsState))\n        }}>\n            <img src={`https://codingapple1.github.io/shop/shoes${props.shoe.id+1}.jpg`} alt=\"\" width=\"100%\"/>\n            <h4>{ props.shoe.title }</h4>\n            <p>{ props.shoe.content } & { props.shoe.price }</p>\n            <Test/>\n        </div>\n    )\n}\n\nfunction Test() {\n    let stock = useContext(stockContext);\n    return <p>재고: {stock}</p>\n}\n\nfunction Loading() {\n    const arr = [];\n    for (let i=0; i<3; i++) {\n        arr.push(<div>로딩중입니다.</div>)\n    }\n    return arr;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport { BrowserRouter } from \"react-router-dom\";\n\n// Provider 컴포넌트 import 해오기\nimport {Provider} from 'react-redux';\n// createStore 함수 import 해오기\nimport {combineReducers, createStore} from \"redux\";\n\nlet alertDefault = true;\n\nfunction reducer2(state = alertDefault, action) {\n    if (action.type === 'alert닫기') {\n        state = false;\n        return state;\n    } else {\n        return state;\n    }\n}\n\nlet defaultState = [\n    { id: 11, name: '흐음', quan: 2 },\n    { id: 12, name: '되긴되네', quan: 10 },\n    { id: 13, name: '재밌긴하군', quan: 8 }\n]\n\n// reducer는 수정된 state 데이터를 return하는 함수입니다.\n// 아래 파라미터 작성법은 default parameter 문법입니다. 파라미터의 초기값을 설정하는 문법이라고 생각하시면 됩니다.\nfunction reducer(state = defaultState, action) {\n    // dispatch로 보낸 object 데이터는 action 인자에 들어있음\n    // action.type : 데이터를 수정하는 조건\n    // 수량증가라는 데이터 수정방법을 정의한 것\n    if (action.type === '항목추가') {\n        // deep copy\n        const stateCopy = [...state];\n        let stateCopyIndex;\n        for (const [index, value] of stateCopy.entries()) {\n            if (value.id === action.payload.id) {\n                stateCopyIndex = index;\n                break;\n            }\n        }\n        if (stateCopyIndex) {\n            stateCopy[stateCopyIndex].quan++;\n        } else {\n            stateCopy.push(action.payload);\n        }\n        return stateCopy;\n    } else if (action.type === '수량증가') {\n        // deep copy\n        const stateCopy = [...state];\n        let stateCopyIndex;\n        for (const [index, value] of stateCopy.entries()) {\n            if (value.id === action.index) {\n                stateCopyIndex = index;\n                break;\n            }\n        }\n        stateCopy[stateCopyIndex].quan++;\n        return stateCopy;\n    } else if (action.type === '수량감소') {\n        // deep copy\n        const stateCopy = [...state];\n        let stateCopyIndex;\n        for (const [index, value] of stateCopy.entries()) {\n            if (value.id === action.index) {\n                stateCopyIndex = index;\n                break;\n            }\n        }\n        stateCopy[stateCopyIndex].quan = stateCopy[stateCopyIndex].quan - 1 < 0 ?\n            0 : stateCopy[stateCopyIndex].quan - 1;\n        return stateCopy;\n    } else {\n        return state\n    }\n}\n\n// createStore() 안에 state 초기값 저장\nlet store = createStore(combineReducers({ reducer, reducer2 }));\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          {/* <Provider>로 <App> 감싸기 */}\n          {/* Provider로 감싸진 애들은 props 없이도 state 공유 가능 */}\n          {/* Provider에 props 전송 */}\n          <Provider store={store}>\n              <App />\n          </Provider>\n      </BrowserRouter>\n  </React.StrictMode>,\n  // App 컴포넌트를 index.html 파일의 root 아이디를 가진 요소에 넣어주세요~\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}